/* 
  ##########################################################################
  ########################            Fx            ########################
  ##########################################################################
*/

// [ log ] 로그를 찍는 함수
const log = console.log;

// [ add ] 두개의 인자를 더해주는 함수
const add = (a, b) => a + b;

// [ map ] 특정 조건에 맵핑되는 정보들을 나열하는 함수
// 1. 다형성을 가짐. Array를 상속받은 객체 뿐만 아니라 iterable protocol을
//      따르는 모든 객체, generator 함수도 맵핑이 가능
const map = (f, iter) => {
  let res = [];
  for (const a of iter) {
    res.push(f(a));
  }
  return res;
};

// [ filter ] 특정 조건에 필터되는 정보들만 모아주는 함수
// 1. 다형성을 가짐. map과 동일
const filter = (f, iter) => {
  let res = [];
  for (const a of iter) {
    if (f(a)) res.push(a);
  }
  return res;
};

// [ reduce ] 특정 조건이 계속해서 누적 적용되는 함수
// 1. 다형성을 가짐.
// 2. 초기값(acc)이 없어도 iter의 첫번째 값을 가져와서 적용
const reduce = (f, acc, iter) => {
  if (!iter) {
    iter = acc[Symbol.iterator]();
    acc = iter.next().value;
  }
  for (const a of iter) {
    acc = f(acc, a);
  }
  return acc;
};

/* 
  ##########################################################################
  ########################         Lazy Fx          ########################
  ##########################################################################
*/

/* 
  ##########################################################################
  ########################      Concurrency Fx      ########################
  ##########################################################################
*/

/* 
  ##########################################################################
  ########################          export          ########################
  ##########################################################################
*/
export { log, add, map, filter, reduce };
